#!/bin/bash -e

HELP_STR="Usage: ./ubuntu-setup [-y | --yes] [-n | --noclobber] [-c | --clobber] [-f | --firmware] [-nf | --nofirmware] [-osl | --overwrite-sources-list ] [-h | --help]

\tyes:\t\t\tassume no user input
\tnoclobber:\t\tdont install 3rd party repositories
\tclobber:\t\tInstall 3rd party repositories
\tfirmware:\t\tInstall firmware repository
\tnofirmware:\t\tPrevents installation of firmware deps firmware repository
\toverwrite-sources-list:\tOverwrites the sources.list with gatech mirrors for faster ubuntu-setup. Only works on ubuntu > precise.
\thelp:\t\t\tprint this message!

This script will need root privileges"

DISTRO_STR="The linux distro you are using is not supported by ubuntu-setup. Please file an issue if you want to request your debian based distro to be added."

# defaults!
OVERWRITE_SOURCES=false
YES=false
SYSTEM="unknown"

if cat /etc/os-release | grep -iq '^NAME=.*Debian'; then # dont add repositories on debian, unsupported
    echo "[WARN] You are using a flavor of debian. This configuration is not officially supported..." >&2
    SYSTEM="debian"
elif cat /etc/os-release | grep -iq '^NAME=.*Ubuntu'; then # We are using a version of ubuntu...
    if cat /etc/os-release | grep -iq '^VERSION=.*14.04'; then # Using Ubuntu 14.04
        echo "Ubuntu 14.04 Detected..."
        SYSTEM="ubuntu-14.04"
    elif cat /etc/os-release | grep -iq '^VERSION=.*15.04'; then # Using Ubuntu 15.04
        echo "Ubuntu 15.04 Detected..."
        SYSTEM="ubuntu-15.04"
    elif cat /etc/os-release | grep -iq '^VERSION=.*15.10'; then # Using Ubuntu 15.10
        echo "Ubuntu 15.10 Detected..."
        SYSTEM="ubuntu-15.10"
    elif cat /etc/os-release | grep -iq '^VERSION=.*16.04'; then # Using Ubuntu 16.04
        echo "Ubuntu 16.04 Detected..."
        SYSTEM="ubuntu-16.04"
    elif cat /etc/os-release | grep -iq '^VERSION=.*16.10'; then # Using Ubuntu 16.10
        echo "Ubuntu 16.10 Detected..."
        SYSTEM="ubuntu-16.10"
    else
        echo "$DISTRO_STR" >&2
        exit 1
    fi
else
    echo "$DISTRO_STR" >&2
    exit 1
fi

# parse command line args
for i in "$@"
do
    case $i in
        -y|--yes)
            YES=true
            ;;
        -h|--help)
            echo -e "$HELP_STR"
            exit 1
            ;;
        *)
            echo "Unrecognized Option: $i"
            echo -e "\n$HELP_STR"
            exit 1
            # unknown options
            ;;
    esac
done

# Become root
if [ $UID -ne 0 ]; then
	echo "-- Becoming root"
	exec sudo $0 $@
fi

apt-get update

MACH=$(uname -m)
unset DPKG_FLAGS

BASE=$(readlink -f $(dirname $0)/..)

echo "-- Installing udev rules"
cp -f $BASE/util/robocup.rules /etc/udev/rules.d/
udevadm control --reload || true # reload rules

echo "-- Installing required packages"

# if yes option is checked, add  a -y
ARGS=""
if $YES; then
    ARGS="-y"
fi

PACKAGES="$(sed 's/#.*//;/^$/d' $BASE/util/ubuntu-packages.txt)"

# install all of the packages listed in required_packages.txt
apt-get install $ARGS $PACKAGES

# Use ubuntu's 'update-alternatives' to select the newer compiler as the default
# See issue #468 on GitHub
if [ "$SYSTEM" = "ubuntu-14.04" ]; then
    update-alternatives --install /usr/bin/g++ g++ $(command -v g++-4.9) 40
    update-alternatives --set g++ $(command -v g++-4.9)
fi

if [ "ubuntu-14.04" = "$SYSTEM" -a "$(clang --version | grep -Eo '[0-9]+\.[0-9]+' | head -n1)" \< "3.5" ]; then
    echo "-- Symlinking clang-3.5 to clang"
    ln -sf $(which clang-3.5) /usr/bin/clang
fi

# install python3 requirements
pip3 install -r $BASE/util/requirements3.txt
# install python2 requirements
pip2 install -r $BASE/util/requirements2.txt

# This script is run as sudo, but we don't want submodules to be owned by the
# root user, so we use `su` to update submodules as the normal user
echo "-- Updating submodules"
SETUP_USER="$SUDO_USER"
if [ -z "$SETUP_USER" ]; then
    SETUP_USER="$(whoami)"
fi

chown -R $SETUP_USER:$SETUP_USER $BASE/external
su $SETUP_USER -c 'git submodule sync'
su $SETUP_USER -c 'git submodule update --init'
